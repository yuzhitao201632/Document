Linux时间（UTC，DST，RTC）相关的问题
 
基本概念

时区：为了克服时间上的混乱，按照地理经度将全球划分为24个区域，同一个区域内在时间表述上统一，这样的24个区域称之为时区。 
时区时间：又称本地时间，标准时间，用来表示某一个具体时区内的时间。 
GMT时间：格林尼治时间（Greenwich Mean Time）。英国伦敦格林尼治天文台的时区时间。 
UTC时间：通用协调时（Universal Time Coordinated）。同一时刻，不同时区内的时区时间是不一样的，为了便于跨时区的沟通比较，设定UTC时间。同一时刻，全球UTC时间唯一，各时区以UTC时间为基准，消除不同时区引入的时间概念上的差异。 
本地时间：一般与时区时间一致，如果存在夏令时，与时区时间会有一小时的偏差。 
DST时间：夏令时，某些国家，为了节约能源，在日出时间较早的时间段里人为的将本地时间向前调整一个小时，时间段结束后再调整回来。这种人为调整后的时间，为夏令时。 
GMT时间，曾用来作为统一全球时间的标准，但在概念上的天文因素更重一些（跟太阳时，地球自转速度变化等相关），逐渐被UTC时间所取代。
下面举个例子说明时区时间，UTC时间的具体应用：
我当前的所在地是中国北京市，时区上属于东8区。 
时区查询如下：
[root@SixDev etc]# date +%z
+0800
[root@SixDev etc]# date +%Z
CST 
时区时间如下：
[root@SixDev etc]# date
2016年 07月 14日 星期四 15:26:11 CST 
UTC时间如下：
[root@SixDev etc]# date -u
2016年 07月 14日 星期四 07:26:02 UTC
这个时候，如果接到一个美国的邮件，约定在2016年 07月 14日 星期四 07:36:00 UTC有一个电话会议，那么通过比较可以知道，我这边还有10分钟的时间可以准备。
Linux时区设置
可用的时区配置：/usr/share/zoneinfo/路径下，是预制的各个时区的文件，可供选用。
当前的时区配置：/etc/localtime是系统当前设定的时区配置。一般是一个软链接，指向/usr/share/zoneinfo下某一个具体的时区配置文件。
/etc/localtime的修改即刻生效，不需要重启系统。
例如：系统当前的时区是中国上海，要改为美国纽约。
[root@SixDev etc]# ll localtime 
lrwxrwxrwx 1 root root 33 3月 13 18:42 localtime -> /usr/share/zoneinfo/Asia/Shanghai
[root@SixDev etc]# date
2016年 07月 14日 星期四 15:39:45 CST 
[root@SixDev etc]# ll localtime 
lrwxrwxrwx 1 root root 36 7月 14 03:40 localtime -> /usr/share/zoneinfo/America/New_York
[root@SixDev etc]# date
2016年 07月 14日 星期四 03:40:23 EDT
Linux环境变量TZ
如果系统当前设置了TZ环境变量，则时区按TZ变量里定义的算。没有TZ变量，则按/etc/localtime文件内定义的时区算。 
[root@SixDev etc]# TZ='Asia/Shanghai';export TZ
[root@SixDev etc]# date
2016年 07月 14日 星期四 15:51:35 CST
Linux系统的时间管理
Linux系统下有两个时钟，实时时钟（RTC, Real Time Clock）和系统时钟（System Clock）。
实时时钟：又称为硬件时间时钟，由主板上的特殊电路维护工作，从而可以在系统停机后也能维持时间计算。
系统时钟：系统内核用来计算时间的时钟。它是从1970年1月 1日00:00:00 UTC到目前为止的总秒数。
系统启动时，读取RTC时钟，根据RTC时钟值，结合当前配置的时区，设置系统时钟。 
RTC记录的只有一个时间值，这个值可以有两种时间表示：UTC时间或本地时间。具体采用的是哪种表示，在系统文件/etc/sysconfig/clock里进行配置。或者如下：
[root@SixDev etc]# hwclock 
2016年07月14日 星期四 16时08分29秒 -0.062939 seconds
[root@SixDev etc]# hwclock --localtime
2016年07月14日 星期四 08时08分53秒 -0.109801 seconds
[root@SixDev etc]# hwclock -u
2016年07月14日 星期四 16时09分35秒 -0.031630 seconds
通过比较，可以看出当前服务器RTC里存的是utc时间。
Linux环境下DST相关
1、查询所在时区的DST设置：
[root@SixDev ~]# zdump -v /etc/localtime | grep 2016
/etc/localtime Sun Mar 13 06:59:59 2016 UTC = Sun Mar 13 01:59:59 2016 EST isdst=0 gmtoff=-18000
/etc/localtime Sun Mar 13 07:00:00 2016 UTC = Sun Mar 13 03:00:00 2016 EDT isdst=1 gmtoff=-14400
/etc/localtime Sun Nov 6 05:59:59 2016 UTC = Sun Nov 6 01:59:59 2016 EDT isdst=1 gmtoff=-14400
/etc/localtime Sun Nov 6 06:00:00 2016 UTC = Sun Nov 6 01:00:00 2016 EST isdst=0 gmtoff=-18000
上面可以看出，当前时区是美国纽约，美国纽约时区，2016年的DST时间段是
2016-03-13 02:00:00 – 2016-11-06 01:00:00
2、C++程序里DST相关：
time_t time(time_t *t);
获取当前系统的日历时间，1970-1-1 00:00:00 UTC以来的秒数 
struct tm *localtime(const time_t *timep)
传入日历时间，获取对应的本地时间。本地时间以年月日时分秒的形式写在tm结构中。
struct tm {
int tm_sec; /* seconds */
int tm_min; /* minutes */
int tm_hour; /* hours */
int tm_mday; /* day of the month */
int tm_mon; /* month */
int tm_year; /* year */
int tm_wday; /* day of the week */
int tm_yday; /* day in the year */
int tm_isdst; /* daylight saving time */
};
其中tm_isdst字段是夏令时的标示。
非0表示DST生效，说明传入的UTC时间对应的本地时间是在夏令时影响时间段内，并且在返回的tm数据的年月日时分秒字段中包含了夏令时的修正。
0表示DST不生效，说明两个可能：1、当前区域没有实施夏令时，2、当前区域实施了夏令时，但是传入的UTC时间对应的本地时间不在夏令时时段范围内。
time_t mktime(struct tm *tm);
传入tm结构表示的本地时间，获得日历时间。
其中tm_isdst是一个传入返回性质的变量。作为传入参数，tm_isdst表示tm结构其他的年月日时分秒数值是否是DST修正后的值。不管调用前传入的tm_isdst如何设置，mktime内部会对tm_isdst重新赋值，赋值的依据是：日历时间点在DST时间段内，则赋为正数，否则为0。 
也就是说，就mktime这个函数来说，在调用前tm.tm_isdst这个变量的值，会直接影响到函数的返回值。
注意： man手册里，对mktime的行为说明有比较详细的说明。包括在调用前将tm_isdst赋值为0，正值以及负值情况下，函数内部的操作区别。但是，测试发现，有一点没有提及：在传入参数tm_isdst为0的情况下，而对应的时分秒确定是在DST影响时间段的话，mktime内部会做DST修正。也就是说，mktime调用结束后，tm中表示的时间会修正为传入时间经DST修正后的时间。下面具体程序实验，对mktime的行为有一个更直观的表现。
以美国时区为例，2016年夏令时范围：2016-03-13 02:00:00 – 2016-11-06 01:00:00 
实验程序如下：
int main()
{
time_t now = time(NULL);
struct tm tmp;
localtime_r(&now, &tmp);
printf("%d-%d-%d %d-%d-%d %d\n", tmp.tm_year, tmp.tm_mon, tmp.tm_mday, tmp.tm_hour, tmp.tm_min, tmp.tm_sec, tmp.tm_isdst); 
struct tm tmp1 = tmp;
tmp1.tm_isdst = 0;
time_t mk_time = mktime(&tmp1);
printf("%d-%d-%d:%d-%d-%d %d-%d-%d %d\n",
now, mk_time, tmp1.tm_isdst, tmp1.tm_year, tmp1.tm_mon, tmp1.tm_mday, tmp1.tm_hour, tmp1.tm_min, tmp1.tm_sec, tmp1.tm_isdst); 
return 0;
}
具体程序测试1：tm.is_dst调用前赋值0
1）：美国时间2016-11-06 00:10:11
[root@SixDev ~]# date 
2016年 11月 06日 星期日 00:10:11 EDT
[root@SixDev ~]# ./a.out 
116-10-6 0-10-13 1
1478405413-1478409013-1:116-10-6 1-10-13 1
2）：美国时间2016-11-06 01:10:11
[root@SixDev ~]# date
2016年 11月 06日 星期日 01:10:11 EDT
[root@SixDev ~]# ./a.out 
116-10-6 1-10-13 1
1478409013-1478412613-0:116-10-6 1-10-13 0
3）：美国时间2016-11-06 02:10:11
[root@SixDev ~]# date
2016年 11月 06日 星期日 02:10:11 EST
[root@SixDev ~]# ./a.out 
116-10-6 2-10-13 0
1478416213-1478416213-0:116-10-6 2-10-13 0
可得看到，tm_isdst置0时，如果系统确定这个时间是在DST时间段内的话（测试1），则会在函数返回前，将传入的年月日时分秒改为DST修正后的；如果系统无法确定（测试2），或者系统确定不是（测试3），则不会修改传入参数。
具体程序测试2：tm.is_dst调用前赋值-1
1）：美国时间2016-11-06 00:10:11
[root@SixDev ~]# date
2016年 11月 06日 星期日 00:10:12 EDT
[root@SixDev ~]# ./a.out 
116-10-6 0-10-14 1
1478405414-1478405414-1:116-10-6 0-10-14 1 
2）：美国时间2016-11-06 01:10:11
[root@SixDev ~]# date
2016年 11月 06日 星期日 01:10:12 EDT
[root@SixDev ~]# ./a.out 
116-10-6 1-10-13 1
1478409013-1478409013-1:116-10-6 1-10-13 1 
3）：美国时间2016-11-06 02:10:11
[root@SixDev ~]# date
2016年 11月 06日 星期日 02:10:12 EST
[root@SixDev ~]# ./a.out 
116-10-6 2-10-13 0
1478416213-1478416213-0:116-10-6 2-10-13 0 
4）：美国时间2016-11-06 01:00:18 
[root@SixDev ~]# date
2016年 11月 06日 星期日 01:00:18 EST
[root@SixDev ~]# ./a.out 
116-10-6 1-0-20 0
1478412020-1478408420-1:116-10-6 1-0-20 1
可得看到， tm_isdst置-1时，如果这个时间很确定是不在DST时间段内的话（测试3），则会按非DST时间计算；如果很确定是在DST时间段内的话（测试1），则按DST时间计算；如果无法确定是否DST时间的话（测试2，测试4），系统都按DST处理了。
项目测试遇到的DST具体问题：
1、活动系统CampaignMan：
问题描述：
美国时区下，DS进程启动时，加载活动配置数据，并对其中的活动开始结束时间等参数的检查过程中，对于(2016.7.14-0:0:0;2016.7.14-0:0:1)这种时间，检查会失败。 
问题分析：
程序源码 
void SetTm(struct tm *tmp,int sec,int min,int hour,int day,int mon,int year)
{
if(!tmp) return;
tmp->tm_sec = sec; 
tmp->tm_min = min; 
tmp->tm_hour = hour;
tmp->tm_mday = day; 
tmp->tm_mon = mon; 
tmp->tm_year = year - TT_YEARDIFF;
} 
125 struct tm tmp;
126 SetTm(&tmp,begin_sec,begin_min,begin_hour,begin_day,begin_month - 1,begin_year);
127 begin = mktime(&tmp);
128 SetTm(&tmp,end_sec,end_min,end_hour,end_day,end_month - 1,end_year);
129 end = mktime(&tmp); 
Gdb如下：
(gdb) p tmp
$1 = {tm_sec = -9872, tm_min = 32767, tm_hour = 4435111, tm_mday = 0, tm_mon = 0, tm_year = 0, tm_wday = 128572712, tm_yday = 0, tm_isdst = 0, tm_gmtoff = 0, 
tm_zone = 0x7fffffffd990 "\200V\252\a"}
(gdb) n
126 in campaignmanager.cpp
(gdb) p tmp
$2 = {tm_sec = 0, tm_min = 0, tm_hour = 0, tm_mday = 14, tm_mon = 6, tm_year = 116, tm_wday = 128572712, tm_yday = 0, tm_isdst = 0, tm_gmtoff = 0, 
tm_zone = 0x7fffffffd990 "\200V\252\a"}
(gdb) n
p 127 in campaignmanager.cpp
(gdb) p tmp
$3 = {tm_sec = 0, tm_min = 0, tm_hour = 1, tm_mday = 14, tm_mon = 6, tm_year = 116, tm_wday = 4, tm_yday = 195, tm_isdst = 1, tm_gmtoff = -14400, 
tm_zone = 0x79bbc10 "EDT"}
(gdb) p begin
$4 = (time_t &) @0x7fffffffda18: 1468472400
(gdb) n
130 in campaignmanager.cpp
(gdb) p tmp
$6 = {tm_sec = 1, tm_min = 0, tm_hour = 0, tm_mday = 14, tm_mon = 6, tm_year = 116, tm_wday = 4, tm_yday = 195, tm_isdst = 1, tm_gmtoff = -14400, 
tm_zone = 0x79bbc10 "EDT"}
(gdb) p end
$5 = (time_t &) @0x7fffffffda10: 1468468801 
分析，SetTm将年月日时分秒转为日历时间，计算begin时，tm的isdst变量没有初始化，值为0，所以调用mktime计算begin时，是按非DST时间计算的。
而2016.7.14-0:0:0时刻是在美国DST时间段的，所以begin算出来的是美国时区（DST修正前）的日历时间。然而，mktime返回前，将isdst置为了1，这样下面再算end时，mktime就是按照DST时间计算的了。
可以看出begin比end大了3600，刚好是1小时的DST修正值。
 
问题处理：SetTm函数里，统一将tmp->tm_isdst置为-1，由系统决定DST的计算。
 
海外版本目前还在测试中，后续发现新的夏令时相关的问题，继续补充
